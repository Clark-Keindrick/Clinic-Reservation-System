CREATE SEQUENCE admin_id_seq
    INCREMENT BY 6
    START WITH 113912;

Create Table ADMIN_STAFF (
	ADMIN_ID        INT            DEFAULT nextval('admin_id_seq') NOT NULL,
	ADMIN_FNAME     VARCHAR(50)    NOT NULL,
	ADMIN_LNAME     VARCHAR(50)    NOT NULL,
	ADMIN_CONTACT   VARCHAR(50)    NOT NULL,
	ADMIN_EMAIL     VARCHAR(50)    NOT NULL,
	ADMIN_UNAME  	VARCHAR(50)    NOT NULL,
	ADMIN_PASS	    VARCHAR(50)    NOT NULL,
	DATE_CREATED    DATE           NOT NULL,
	DEACTIVATE      SMALLINT       DEFAULT 0 NOT NULL,
	PRIMARY KEY (ADMIN_ID));



CREATE SEQUENCE pat_id_seq
    INCREMENT BY 6
    START WITH 11931;

Create Table ON_GOING_APPOINTMENT(
	PAT_ID             INT              DEFAULT nextval('pat_id_seq') NOT NULL,
	PAT_FNAME          VARCHAR(50)      NOT NULL,
	PAT_LNAME          VARCHAR(50)      NOT NULL,
	PAT_MIDNAME        VARCHAR(50)      NULL,
	PAT_BIRTHDAY       DATE             NOT NULL,
	PAT_GENDER         CHAR(10)         NOT NULL,
	PAT_ADDRESS        VARCHAR(100)     NOT NULL,
	PAT_CONTACT        VARCHAR(50)      NOT NULL,
	PAT_EMAIL          VARCHAR(50)      NULL,
	APPOINTMENT_DATE   DATE             NOT NULL,
	APPOINTMENT_TIME   TIME             NOT NULL,
	ADMIN_ID           INT              NULL,
	LOYALTY_ID         INT              NULL,
	PRIMARY KEY (PAT_ID),
	FOREIGN KEY (ADMIN_ID) REFERENCES ADMIN_STAFF (ADMIN_ID));



Create Table NEW_PATIENT (
	PAT_ID	              INT              NOT NULL,	
	PAT_INFO_FNAME        VARCHAR(50)      NOT NULL,
	PAT_INFO_LNAME        VARCHAR(50)      NOT NULL,
	PAT_INFO_MIDNAME      VARCHAR(50)      NULL,
	PAT_INFO_BIRTHDAY     DATE             NOT NULL,
	PAT_INFO_GENDER       CHAR(10)         NOT NULL,
	PAT_INFO_ADDRESS      VARCHAR(100)     NOT NULL,
	PAT_INFO_CONTACT      VARCHAR(50)      NOT NULL,
	PAT_INFO_EMAIL        VARCHAR(50)      NULL,
	INFO_APP_DATE         DATE                NOT NULL,
	INFO_APP_TIME         TIME                NOT NULL,
	ADMIN_ID              INT                 NULL,
	PRIMARY KEY (PAT_ID));


CREATE SEQUENCE app_id_seq
    INCREMENT BY 6
    START WITH 05917;


Create Table APPOINTMENT_MADE (
	APP_ID        INT      DEFAULT nextval('app_id_seq') NOT NULL,
	APP_FNAME     VARCHAR(50)      NOT NULL,
	APP_LNAME     VARCHAR(50)      NOT NULL,
	APP_MIDNAME   VARCHAR(50)      NOT NULL,	
	APP_DATE      DATE     NOT NULL,
	APP_TIME      TIME     NOT NULL,
	PAT_ID        INT      NULL);

  

CREATE SEQUENCE reg_id_seq
    INCREMENT BY 6
    START WITH 2023;

Create  Table REGULAR_PATIENT (
	REG_PAT_ID       INT      DEFAULT nextval('reg_id_seq') NOT NULL,
	PAT_ID           INT      NULL,
	PRIMARY KEY(REG_PAT_ID),
	FOREIGN KEY(PAT_ID) REFERENCES NEW_PATIENT (PAT_ID) ON DELETE CASCADE);


Create Table APPOINTMENT_HISTORY(
	ADMIN_ID         INT         NOT NULL,
	PAT_ID           INT         NULL,
	APP_HIST_DATE    DATE        NOT NULL,
	APP_HIST_TIME    TIME        NOT NULL,
	PRIMARY KEY (APP_HIST_DATE, ADMIN_ID),
	FOREIGN KEY (ADMIN_ID)  REFERENCES ADMIN_STAFF (ADMIN_ID),
	FOREIGN KEY (PAT_ID) REFERENCES NEW_PATIENT (PAT_ID) ON DELETE CASCADE);





CREATE OR REPLACE FUNCTION ins_new_pat()
	RETURNS TRIGGER AS
$$
BEGIN
	INSERT INTO NEW_PATIENT VALUES(OLD.PAT_ID, OLD.PAT_FNAME, OLD.PAT_LNAME, OLD.PAT_MIDNAME, OLD.PAT_BIRTHDAY, 
								   OLD.PAT_GENDER, OLD.PAT_ADDRESS, OLD.PAT_CONTACT, OLD.PAT_EMAIL, OLD.APPOINTMENT_DATE, OLD.APPOINTMENT_TIME, OLD.ADMIN_ID);
	
	RETURN NEW;
END;

$$ LANGUAGE PLPGSQL;

CREATE TRIGGER trg_ins_new_pat
	AFTER DELETE ON ON_GOING_APPOINTMENT
	FOR EACH ROW
	EXECUTE FUNCTION ins_new_pat()




CREATE OR REPLACE FUNCTION ins_app_hist()
	RETURNS TRIGGER AS
$$
BEGIN
	INSERT INTO APPOINTMENT_HISTORY VALUES(NEW.ADMIN_ID, NEW.PAT_ID, NEW.INFO_APP_DATE, NEW.INFO_APP_TIME);
	
	RETURN NEW;
END;

$$ LANGUAGE PLPGSQL;

CREATE TRIGGER trg_ins_app_hist
	AFTER INSERT ON NEW_PATIENT
	FOR EACH ROW
	EXECUTE FUNCTION ins_app_hist()




CREATE OR REPLACE FUNCTION ins_app_made()
	RETURNS TRIGGER AS
$$
BEGIN
	INSERT INTO APPOINTMENT_MADE (APP_FNAME, APP_LNAME, APP_MIDNAME, APP_DATE, APP_TIME, PAT_ID) VALUES(OLD.PAT_FNAME, OLD.PAT_LNAME, OLD.PAT_MIDNAME, OLD.APPOINTMENT_DATE, OLD.APPOINTMENT_TIME, OLD.PAT_ID);
	
	RETURN NEW;
END;

$$ LANGUAGE PLPGSQL;

CREATE TRIGGER trg_ins_app_made
	AFTER DELETE ON ON_GOING_APPOINTMENT
	FOR EACH ROW
	EXECUTE FUNCTION ins_app_made()


CREATE OR REPLACE FUNCTION ins_reg_pat()
	RETURNS TRIGGER AS
$$
BEGIN
	IF (SELECT LOYALTY_ID FROM ON_GOING_APPOINTMENT WHERE LOYALTY_ID IN (SELECT PAT_ID FROM NEW_PATIENT)) THEN
		INSERT INTO REGULAR_PATIENT VALUES (OLD.LOYALTY_ID);
	END IF;
	
	RETURN NEW;
END;

$$ LANGUAGE PLPGSQL;

CREATE TRIGGER trg_ins_reg_pat
	BEFORE INSERT ON NEW_PATIENT
	FOR EACH ROW
	EXECUTE FUNCTION ins_reg_pat()
	

